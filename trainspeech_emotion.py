# -*- coding: utf-8 -*-
"""trainspeech_emotion

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1zGPp0Jt6rcmS1_07Yi7qIaKlx7o48FiD
"""

"""
Train model on RAVDESS or TESS dataset using extracted prosodic features like pitch, energy, etc.
"""
import librosa
import os
import numpy as np
import pandas as pd
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import classification_report
from sklearn.model_selection import train_test_split
from joblib import dump

DATA_DIR = "RAVDESS"  # or "TESS" if you're using TESS

def extract_features(audio_path):
    y, sr = librosa.load(audio_path, sr=None)
    return [
        librosa.feature.rms(y=y).mean(),
        librosa.feature.zero_crossing_rate(y).mean(),
        librosa.feature.spectral_centroid(y=y, sr=sr).mean(),
        librosa.feature.spectral_bandwidth(y=y, sr=sr).mean()
    ]

def load_ravdess_data():
    X, y = []
    for root, _, files in os.walk(DATA_DIR):
        for file in files:
            if file.endswith(".wav"):
                emotion = int(file.split("-")[2])  # Extract emotion ID
                label = 1 if emotion in [3, 4, 5] else 0  # 3=Happy, 4=Sad, 5=Anger (stress-prone)
                features = extract_features(os.path.join(root, file))
                X.append(features)
                y.append(label)
    return np.array(X), np.array(y)

def train_speech_model():
    X, y = load_ravdess_data()
    X_train, X_test, y_train, y_test = train_test_split(X, y, stratify=y, test_size=0.2)

    model = LogisticRegression(max_iter=500)
    model.fit(X_train, y_train)

    preds = model.predict(X_test)
    print(classification_report(y_test, preds))

    dump(model, "models/speech_emotion_model.joblib")
    print("Speech model saved to models/speech_emotion_model.joblib.")

if __name__ == "__main__":
    train_speech_model()